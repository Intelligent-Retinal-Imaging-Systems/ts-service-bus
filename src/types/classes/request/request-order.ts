import {EvaluationType} from "../../";

/**
 * Structure containing order details
 */
export class RequestOrder {
    /**
     * Optionally specify the procedure (CPT Code)
     */
    public CPTCode: string = "";

    /**
     * If specified, this identifies when orders should be available from the worklist
     */
    public ScheduledTime: any; // Consider specifying a more precise type if possible

    /**
     * Order identifier as specified by the submitting organization
     */
    public LocalId: string = "";

    /**
     * US State where the exam is being performed. Important for proper assignment of Graders
     */
    public State: string = "";

    /**
     * If true, the exam will only include one eye as there is a known issue preventing the capture of the other eye
     */
    public SingleEyeOnly: boolean = false; // Default to false

    /**
     * If specified, the reason that only one eye is being captured. Based on customer configuration, this could render in the final report
     */
    public MissingEyeReason: string = "";

    /**
     * Any additional order specified information typically JSON embedded
     */
    public AdditionalInfo: string = "";

    /**
     * Optional encounter number as generally created from the customers EMR/EHR
     */
    public EncounterNumber: string = "";

    /**
     * Collection of evaluation types required for the order (which exams to perform).
     * Default to DR. Do not change without consulting IRIS support as evaluation types must
     * be subscribed to prior to submission.
     */
    public EvaluationTypes: EvaluationType[] = [EvaluationType.DR];

    /**
     * Optionally supply identifier as typically originating from a DICOM source
     */
    public StudyInstanceUniqueId: string = "";

    /**
     * Optionally supply the department id (specified by the submitting organization) that the exam will be fulfilled from.
     */
    public DepartmentId: string = "";

    /**
     * Optionally supply identifier as is typically generated by submitting organizations EMR/EHR
     */
    public OrderableIdentifier: string = "";

    constructor(
        cptCode?: string,
        scheduledTime?: any,
        localId?: string,
        state?: string,
        singleEyeOnly?: boolean,
        missingEyeReason?: string,
        additionalInfo?: string,
        encounterNumber?: string,
        evaluationTypes?: EvaluationType[],
        studyInstanceUniqueId?: string,
        departmentId?: string,
        orderableIdentifier?: string
    ) {
        if (cptCode) this.CPTCode = cptCode;
        if (scheduledTime) this.ScheduledTime = scheduledTime;
        if (localId) this.LocalId = localId;
        if (state) this.State = state;
        if (singleEyeOnly !== undefined) this.SingleEyeOnly = singleEyeOnly; // Allow false as a valid value
        if (missingEyeReason) this.MissingEyeReason = missingEyeReason;
        if (additionalInfo) this.AdditionalInfo = additionalInfo;
        if (encounterNumber) this.EncounterNumber = encounterNumber;
        if (evaluationTypes) this.EvaluationTypes = evaluationTypes;
        if (studyInstanceUniqueId) this.StudyInstanceUniqueId = studyInstanceUniqueId;
        if (departmentId) this.DepartmentId = departmentId;
        if (orderableIdentifier) this.OrderableIdentifier = orderableIdentifier;
    }
}
